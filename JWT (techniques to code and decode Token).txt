// technique - 01 :            [ 1 ] 


const jwt = require("jsonwebtoken")

const value ={
    name:"Ansh",
    accountNum:123456
}

const token = jwt.sign(value, "secret")
console.log(token)

const decoded = jwt.verify(token, "secret")
console.log(decoded)

// technique - 02 :  (Advanced :)                    [ 2 ]       

const jwt = require('jsonwebtoken');
const jwtPassword = 'secret';
const z = require('zod')

const emailSchema = z.string().email()
const passwordSchema = z.string().min(6)


function signJwt(username, password) {
    const usernameResponse = emailSchema.safeParse(username)
    const passwordResponse = passwordSchema.safeParse(password)
    if(!usernameResponse.success || !passwordResponse.success){
        return null;
    }
    // The technique to create jwt (token)
    const signature = jwt.sign({
        username
    }, jwtPassword)
    return signature;
}

const ans = signJwt("anshpethe3030@gmail.com", "abscdPassword")


// Output : Example - token eyfgnghnfgnfgdfghjfguhfgdhjfgdnjbdfgubnbfvuiegrjbgfvbijvbfbiugeubiygerubihguniovbeuniebvnubiebuibnebuibbuiurghslrtgndwretruykhgnvvbdfcasfsbnbjkjhoukhhnghgugbgngbgbgnbngutghnbgbfbnvbfhrfygerywuwesjfngfjnhkjuiouiojjkmjhmhnjjmngbnfcdvbdxczxsdwsedwreg



// Another technique to Decode a JsonWebToken -   [ 3 ]


const jwt = require('jsonwebtoken');
function decodeJwt(token) {

    const decoded = jwt.decode(token);
    if(decoded){
        return decoded;
    }
    else{
        return false;
    }
}

const token = decodeJwt("eygfhfjmgbgngjgjkturyhwetgwerqdasdfsccbvnfiwieuryfbvbncxnmsksoeiruyrfhgbfhruiweikdjnvnmdkl") 


// technique to verify JWT -            [ 4 ]     

const jwt = require('jsonwebtoken');
const jwtPassword = 'secret';

function verifyJwt(token) {
    let ans = true;
    try{
        jwt.verify(token, jwtPassword)
    }catch{
        ans = false;
    }
    return ans;
}

 const ans = verifyJwt("asdasddsa")
 console.log(ans)

